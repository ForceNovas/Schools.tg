"""
Schools.by Telegram Bot
Telegram –±–æ—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º schools.by
"""

import os
import asyncio
from typing import Dict, Optional
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    CallbackQueryHandler,
    ConversationHandler,
    filters,
    ContextTypes
)
import logging

from schools_api import SchoolsAPI, SchoolsAPIError

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WAITING_LOGIN, WAITING_PASSWORD = range(2)

class SchoolsBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ –¥–ª—è schools.by"""
    
    def __init__(self, token: str):
        self.token = token
        self.application = Application.builder().token(token).build()
        self.user_sessions = {}  # –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
        self.application.add_handler(CommandHandler("start", self.start_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /help
        self.application.add_handler(CommandHandler("help", self.help_command))
        
        # ConversationHandler –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        auth_handler = ConversationHandler(
            entry_points=[CommandHandler("login", self.login_command)],
            states={
                WAITING_LOGIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_login)],
                WAITING_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_password)]
            },
            fallbacks=[CommandHandler("cancel", self.cancel_command)]
        )
        self.application.add_handler(auth_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        self.application.add_handler(CommandHandler("schedule", self.schedule_command))
        self.application.add_handler(CommandHandler("grades", self.grades_command))
        self.application.add_handler(CommandHandler("homework", self.homework_command))
        self.application.add_handler(CommandHandler("announcements", self.announcements_command))
        self.application.add_handler(CommandHandler("profile", self.profile_command))
        self.application.add_handler(CommandHandler("logout", self.logout_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback queries (inline –∫–Ω–æ–ø–∫–∏)
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        self.application.add_handler(MessageHandler(filters.COMMAND, self.unknown_command))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        welcome_message = f"""
üè´ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Schools.tg, {user.first_name}!

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–∏–º –¥–∞–Ω–Ω—ã–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã schools.by:
üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π
üìä –û—Ü–µ–Ω–∫–∏
üìù –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏—è

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∫–æ–º–∞–Ω–¥–æ–π /login

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/help - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
/login - –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É schools.by
/schedule - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
/grades - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ü–µ–Ω–∫–∏
/homework - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
/announcements - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è
/profile - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ
/logout - –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        """
        
        keyboard = [
            [InlineKeyboardButton("üîë –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É", callback_data="login")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_message, reply_markup=reply_markup)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_message = """
üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üîë –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è:
/login - –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É schools.by
/logout - –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã

üìö –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
/schedule - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π
/grades - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ü–µ–Ω–∫–∏
/homework - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
/announcements - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è
/profile - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ

‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞:
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º

üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:
‚Ä¢ –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
‚Ä¢ –ë–æ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ —Ö—Ä–∞–Ω–∏—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –≤ —Ç–µ—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
‚Ä¢ –î–ª—è –≤—ã—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /logout
        """
        await update.message.reply_text(help_message)
    
    async def login_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        user_id = update.effective_user.id
        
        if user_id in self.user_sessions:
            await update.message.reply_text(
                "–í—ã —É–∂–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /logout –¥–ª—è –≤—ã—Ö–æ–¥–∞."
            )
            return ConversationHandler.END
        
        await update.message.reply_text(
            "üîë –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É schools.by\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω (–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è):\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel"
        )
        return WAITING_LOGIN
    
    async def handle_login(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞"""
        username = update.message.text.strip()
        context.user_data['username'] = username
        
        await update.message.reply_text(
            f"–õ–æ–≥–∏–Ω –ø—Ä–∏–Ω—è—Ç: {username}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:"
        )
        return WAITING_PASSWORD
    
    async def handle_password(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –∏ –ø–æ–ø—ã—Ç–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        password = update.message.text.strip()
        username = context.user_data.get('username')
        user_id = update.effective_user.id
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º –∏–∑ —á–∞—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        try:
            await update.message.delete()
        except:
            pass
        
        await update.message.reply_text("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º API –∫–ª–∏–µ–Ω—Ç –∏ –ø—ã—Ç–∞–µ–º—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è
            async with SchoolsAPI() as api:
                auth_result = await api.authenticate(username, password)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                if isinstance(auth_result, dict) and not auth_result.get('success', False):
                    error_msg = auth_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                    await update.message.reply_text(
                        f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {error_msg}\n\n"
                        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è.\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /login"
                    )
                    return ConversationHandler.END
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self.user_sessions[user_id] = {
                    'username': username,
                    'authenticated': True,
                    'auth_data': auth_result
                }
            
            keyboard = [
                [InlineKeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="schedule")],
                [InlineKeyboardButton("üìä –û—Ü–µ–Ω–∫–∏", callback_data="grades")],
                [InlineKeyboardButton("üìù –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è", callback_data="homework")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            success_msg = auth_result.get('message', '–£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è')
            await update.message.reply_text(
                f"‚úÖ {success_msg}\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:",
                reply_markup=reply_markup
            )
            
        except SchoolsAPIError as e:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {str(e)}\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /login"
            )
        except Exception as e:
            logger.error(f"Authentication error: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        
        return ConversationHandler.END
    
    async def cancel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        await update.message.reply_text(
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é."
        )
        return ConversationHandler.END
    
    def _check_authentication(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        session = self.user_sessions.get(user_id)
        return session and session.get('authenticated', False)
    
    def _get_user_credentials(self, user_id: int) -> Optional[tuple]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        session = self.user_sessions.get(user_id)
        if session and session.get('authenticated'):
            return session.get('username'), session.get('auth_data')
        return None
    
    async def schedule_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        user_id = update.effective_user.id
        
        if not self._check_authentication(user_id):
            await update.message.reply_text(
                "üîê –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login"
            )
            return
        
        try:
            await update.message.reply_text("üìÖ –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é API –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            async with SchoolsAPI() as api:
                schedule = await api.get_schedule()
                
                if isinstance(schedule, dict) and 'html' not in schedule:
                    # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    schedule_text = "üìÖ **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π:**\n\n"
                    schedule_text += str(schedule)
                else:
                    # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                    username = self.user_sessions[user_id].get('username', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
                    schedule_text = f"""üìÖ **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {username}**

üìÜ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:
‚Ä¢ 09:00-09:45 –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞
‚Ä¢ 10:00-10:45 –†—É—Å—Å–∫–∏–π —è–∑—ã–∫
‚Ä¢ 11:00-11:45 –ò—Å—Ç–æ—Ä–∏—è

üìÜ –í—Ç–æ—Ä–Ω–∏–∫:
‚Ä¢ 09:00-09:45 –§–∏–∑–∏–∫–∞
‚Ä¢ 10:00-10:45 –•–∏–º–∏—è
‚Ä¢ 11:00-11:45 –ë–∏–æ–ª–æ–≥–∏—è

‚ö†Ô∏è –≠—Ç–æ –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–∞ API."""
                
                await update.message.reply_text(schedule_text, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Schedule error: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")
    
    async def grades_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫"""
        user_id = update.effective_user.id
        
        if not self._check_authentication(user_id):
            await update.message.reply_text(
                "üîê –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ü–µ–Ω–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login"
            )
            return
        
        try:
            await update.message.reply_text("üìä –ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫–∏...")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –æ—Ü–µ–Ω–æ–∫ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            username = self.user_sessions[user_id].get('username', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            grades_text = f"""üìä **–û—Ü–µ–Ω–∫–∏ –¥–ª—è {username}**

üìö –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞: 9, 8, 9, 10
üìñ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫: 8, 9, 8, 9
üåç –ì–µ–æ–≥—Ä–∞—Ñ–∏—è: 10, 9, 10, 9
üî¨ –§–∏–∑–∏–∫–∞: 8, 8, 9, 8
‚öóÔ∏è –•–∏–º–∏—è: 9, 8, 9, 9
üåø –ë–∏–æ–ª–æ–≥–∏—è: 9, 10, 9, 8

üéÜ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: 8.9

‚ö†Ô∏è –≠—Ç–æ –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–∞ API."""
            
            await update.message.reply_text(grades_text, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Grades error: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ü–µ–Ω–æ–∫.")
    
    async def homework_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π"""
        user_id = update.effective_user.id
        
        if not self._check_authentication(user_id):
            await update.message.reply_text(
                "üîê –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login"
            )
            return
        
        try:
            await update.message.reply_text("üìù –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è...")
            
            username = self.user_sessions[user_id].get('username', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            homework_text = f"""üìù **–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è {username}**

üìö –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞:
‚Ä¢ –†–µ—à–∏—Ç—å –∑–∞–¥–∞—á–∏ ‚Ññ 15-20 (—Å—Ç—Ä. 45)
‚Ä¢ –ö —Å—Ä–µ–¥–µ 22.09

üìñ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫:
‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ—á–∏–Ω–µ–Ω–∏–µ –Ω–∞ —Ç–µ–º—É "–ú–æ—è –º–µ—á—Ç–∞"
‚Ä¢ –ö –ø—è—Ç–Ω–∏—Ü–µ 24.09

üî¨ –§–∏–∑–∏–∫–∞:
‚Ä¢ –ò–∑—É—á–∏—Ç—å –ø–∞—Ä–∞–≥—Ä–∞—Ñ 3.2
‚Ä¢ –†–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É ‚Ññ 12
‚Ä¢ –ö —á–µ—Ç–≤–µ—Ä–≥—É 23.09

‚ö†Ô∏è –≠—Ç–æ –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–∞ API."""
            
            await update.message.reply_text(homework_text, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Homework error: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π.")
    
    async def announcements_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        
        if not self._check_authentication(user_id):
            await update.message.reply_text(
                "üîê –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login"
            )
            return
        
        try:
            await update.message.reply_text("üì¢ –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è...")
            
            announcements_text = """üì¢ **–û–±—ä—è–≤–ª–µ–Ω–∏—è**

üéØ **–í–∞–∂–Ω–æ!** –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ
üìÖ 25 —Å–µ–Ω—Ç—è–±—Ä—è 2023 –≥. –≤ 18:00
üè† –í –∞–∫—Ç–æ–≤–æ–º –∑–∞–ª–µ —à–∫–æ–ª—ã

üé≠ **–û—Å–µ–Ω–Ω–∏–π –∫–æ–Ω—Ü–µ—Ä—Ç**
üìÖ 28 —Å–µ–Ω—Ç—è–±—Ä—è 2023 –≥. –≤ 16:00
üé§ –û—Ç–∫—Ä—ã—Ç—ã–µ —Ä–µ–ø–µ—Ç–∏—Ü–∏–∏ –∫–∞–∂–¥—É—é —Å—Ä–µ–¥—É

üèÜ **–û–ª–∏–º–ø–∏–∞–¥–∞ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ**
üìÖ 5 –æ–∫—Ç—è–±—Ä—è 2023 –≥.
üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ 30 —Å–µ–Ω—Ç—è–±—Ä—è

‚ö†Ô∏è –≠—Ç–æ –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–∞ API."""
            
            await update.message.reply_text(announcements_text, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Announcements error: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
    
    async def profile_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        
        if not self._check_authentication(user_id):
            await update.message.reply_text(
                "üîê –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login"
            )
            return
        
        try:
            await update.message.reply_text("üë§ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è...")
            
            username = self.user_sessions[user_id].get('username', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            school = self.user_sessions[user_id].get('school', '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ')
            
            profile_text = f"""üë§ **–ü—Ä–æ—Ñ–∏–ª—å —É—á–µ–Ω–∏–∫–∞**

üë®‚Äçüéì **–ò–º—è:** {username}
üè† **–®–∫–æ–ª–∞:** {school}
üìö **–ö–ª–∞—Å—Å:** 9–ê
üéÜ **–£—á–µ–±–Ω—ã–π –≥–æ–¥:** 2023-2024

üìä **–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: 8.4
‚Ä¢ –ü—Ä–æ–ø—É—Å–∫–æ–≤: 3 –¥–Ω—è
‚Ä¢ –û–ø–æ–∑–¥–∞–Ω–∏–π: 1 —Ä–∞–∑

üîß **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ (/schedule)
‚Ä¢ üìä –û—Ü–µ–Ω–∫–∏ (/grades)
‚Ä¢ üìù –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è (/homework)
‚Ä¢ üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏—è (/announcements)

‚ö†Ô∏è –≠—Ç–æ –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–∞ API."""
            
            await update.message.reply_text(profile_text, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Profile error: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
    
    async def logout_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
        user_id = update.effective_user.id
        
        if user_id in self.user_sessions:
            # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            del self.user_sessions[user_id]
            
            await update.message.reply_text(
                "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞."
            )
        else:
            await update.message.reply_text(
                "‚ÑπÔ∏è –í—ã –Ω–µ –±—ã–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ."
            )
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback queries –æ—Ç inline –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == "login":
            await query.message.reply_text(
                "üîë –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É."
            )
        elif data == "help":
            await self.help_command(update, context)
        elif data == "schedule":
            await self.schedule_command(update, context)
        elif data == "grades":
            await self.grades_command(update, context)
        elif data == "homework":
            await self.homework_command(update, context)
    
    async def unknown_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        await update.message.reply_text(
            "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
        )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Schools.by Telegram Bot...")
        print("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –ù–∞–π–¥–∏—Ç–µ –µ–≥–æ –≤ Telegram –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
        print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        self.application.run_polling()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    
    if not token or token == 'YOUR_BOT_TOKEN_HERE':
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω TELEGRAM_BOT_TOKEN")
        print("")
        print("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:")
        print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ @BotFather –≤ Telegram")
        print("2. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /newbot")
        print("3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω")
        print("4. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª .env –∏ –∑–∞–º–µ–Ω–∏—Ç–µ YOUR_BOT_TOKEN_HERE –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω")
        print("5. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —Å–Ω–æ–≤–∞: python bot.py")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        bot = SchoolsBot(token)
        bot.run()
    except KeyboardInterrupt:
        print("\n‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")


if __name__ == '__main__':
    main()